{"version":3,"sources":["components/Login.js","components/StartQuiz.js","api/quizQuestions.js","components/Question.js","components/QuestionCount.js","components/AnswerOption.js","components/Quiz.js","components/Result.js","components/QuestionTest.js","App.js","serviceWorker.js","index.js"],"names":["Login","react_default","a","createElement","className","type","placeholder","value","react_router_dom","to","StartQuiz","quizQuestions","question","answers","content","Question","props","QuestionCount","counter","total","AnswerOption","Fragment","name","checked","answerType","answer","id","disabled","onChange","onAnswerSelected","htmlFor","answerContent","$","document","ready","click","slideToggle","Quiz","react_transition_group","component","transitionName","transitionEnterTimeout","transitionLeaveTimeout","transitionAppear","transitionAppearTimeout","key","questionId","components_QuestionCount","questionTotal","components_Question","answerOptions","map","components_AnswerOption","Result","QuestionTest","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","answersCount","result","handleAnswerSelected","bind","assertThisInitialized","_this2","shuffledAnswerOptions","shuffleArray","setState","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","event","_this3","setUserAnswer","currentTarget","setTimeout","setNextQuestion","setResults","getResults","objectSpread","defineProperty","answersCountKeys","keys","answersCountValues","maxAnswerCount","max","apply","filter","components_Quiz","components_Result","quizResult","renderResult","renderQuiz","Component","App","react_router","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","src_App_0","getElementById","navigator","serviceWorker","then","registration","unregister"],"mappings":"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","file":"static/js/main.3918c305.chunk.js","sourcesContent":["import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nconst Login =()=>{\r\n\r\nreturn(\r\n\r\n<div className=\"login-form\">\r\n  <form>\r\n    <h1>Login</h1>\r\n    <div className=\"content\">\r\n      <div className=\"input-field\">\r\n        <input type=\"email\" placeholder=\"Email\" value=\"user\"/>\r\n      </div>\r\n      <div className=\"input-field\">\r\n        <input type=\"password\" placeholder=\"Password\" value=\"user2345\" />\r\n      </div>\r\n     \r\n    </div>\r\n    <div className=\"action\">\r\n      \r\n    <NavLink to=\"/StartQuiz\" className=\"link button\">Login</NavLink>\r\n    </div>\r\n  </form>\r\n</div>\r\n)\r\n}\r\nexport default Login;","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nconst StartQuiz =()=>{\r\n\r\nreturn(\r\n\r\n<div className=\"login-form start-form\">\r\n \r\n    <div className=\"action\">\r\n      \r\n    <NavLink to=\"/QuestionTest\" className=\"link button\">Start Test</NavLink>\r\n    </div>\r\n \r\n</div>\r\n)\r\n}\r\nexport default StartQuiz;","var quizQuestions = [\n  {\n      question: \" As soon as the state of the React component is modified, the component _______\",\n      answers: [\n          {\n              type: \"Microsoft\",\n              content: \"recreated from scratch\"\n          },\n          {\n              type: \"Nintendo\",\n              content: \"restore the component\"\n          },\n          {\n              type: \"Sony\",\n              content: \"Does nothing, you have to call the render method to make the component\"\n          }\n      ]\n  },\n  {\n      question: \"What is ReactJS?\",\n      answers: [\n          {\n              type: \"Microsoft\",\n              content: \"Server-side Framework\"\n          },\n          {\n              type: \"Nintendo\",\n              content: \"User-interface framework\"\n          },\n          {\n              type: \"Sony\",\n              content: \"Both\"\n          }\n      ]\n  },\n  {\n      question: \"Which of these racing franchises would you prefer to play a game from?\",\n      answers: [\n          {\n              type: \"Microsoft\",\n              content: \"Forza\"\n          },\n          {\n              type: \"Nintendo\",\n              content: \"Mario Kart\"\n          },\n          {\n              type: \"Sony\",\n              content: \"Gran Turismo\"\n          }\n      ]\n  },\n  {\n      question: \"Which of these games do you think is best?\",\n      answers: [\n          {\n              type: \"Microsoft\",\n              content: \"BioShock\"\n          },\n          {\n              type: \"Nintendo\",\n              content: \"The Legend of Zelda: Ocarina of Time\"\n          },\n          {\n              type: \"Sony\",\n              content: \"Final Fantasy VII\"\n          }\n      ]\n  },\n  {\n      question: \"What console would you prefer to own?\",\n      answers: [\n          {\n              type: \"Microsoft\",\n              content: \"X-Box One\"\n          },\n          {\n              type: \"Nintendo\",\n              content: \"Wii U\"\n          },\n          {\n              type: \"Sony\",\n              content: \"Playstation 4\"\n          }\n      ]\n  }\n];\n\nexport default quizQuestions;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Question(props) {\n  return <h2 className=\"question\">{props.content}</h2>;\n}\n\nQuestion.propTypes = {\n  content: PropTypes.string.isRequired\n};\n\nexport default Question;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction QuestionCount(props) {\n  return (\n    <div className=\"questionCount\">\n      Question <span>{props.counter}</span> of <span>{props.total}</span>\n    </div>\n  );\n}\n\nQuestionCount.propTypes = {\n  counter: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired\n};\n\nexport default QuestionCount;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction AnswerOption(props) {\n  return (\n    <>  \n      <li className=\"answerOption\">\n      <input\n        type=\"radio\"\n        className=\"radioCustomButton\"\n        name=\"radioGroup\"\n        checked={props.answerType === props.answer}\n        id={props.answerType}\n        value={props.answerType}\n        disabled={props.answer}\n        onChange={props.onAnswerSelected}\n      />\n      <label className=\"radioCustomLabel\" htmlFor={props.answerType}>\n        {props.answerContent}\n      </label>\n    </li>\n    \n\n    \n    </>\n  );\n}\n\nAnswerOption.propTypes = {\n  answerType: PropTypes.string.isRequired,\n  answerContent: PropTypes.string.isRequired,\n  answer: PropTypes.string.isRequired,\n  onAnswerSelected: PropTypes.func.isRequired\n};\n\nexport default AnswerOption;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { CSSTransitionGroup } from 'react-transition-group';\nimport Question from '../components/Question';\nimport QuestionCount from '../components/QuestionCount';\nimport AnswerOption from '../components/AnswerOption';\nimport { NavLink } from 'react-router-dom';\n\nimport $ from 'jquery';\n\n$(document).ready(function(){\n$(\".view-summary\").click(function(){\n  $(\".summarrysection\").slideToggle();\n});\n});\nfunction Quiz(props) {\n  function renderAnswerOptions(key) {\n    return (\n      <AnswerOption\n        key={key.content}\n        answerContent={key.content}\n        answerType={key.type}\n        answer={props.answer}\n        questionId={props.questionId}\n        onAnswerSelected={props.onAnswerSelected}\n      />\n    );\n  }\n\n  return (\n    <CSSTransitionGroup\n      className=\"container\"\n      component=\"div\"\n      transitionName=\"fade\"\n      transitionEnterTimeout={800}\n      transitionLeaveTimeout={500}\n      transitionAppear\n      transitionAppearTimeout={500}\n    >\n      <div key={props.questionId}>\n        <QuestionCount counter={props.questionId} total={props.questionTotal} />\n        <Question content={props.question} />\n        <ul className=\"answerOptions\">\n          {props.answerOptions.map(renderAnswerOptions)}\n        </ul>\n        \n        <NavLink to=\"/StartQuiz\" className =\"link-skip\">Skip</NavLink>\n        <NavLink to=\"StartQuiz\" className =\"link-skip link-return\">Return</NavLink>\n       \n        <NavLink to=\"#\" className =\"view-summary\">View Summary</NavLink>\n        <div className='summarrysection'>restore the component</div>\n      </div>\n    </CSSTransitionGroup>\n  );\n}\n\nQuiz.propTypes = {\n  answer: PropTypes.string.isRequired,\n  answerOptions: PropTypes.array.isRequired,\n  question: PropTypes.string.isRequired,\n  questionId: PropTypes.number.isRequired,\n  questionTotal: PropTypes.number.isRequired,\n  onAnswerSelected: PropTypes.func.isRequired\n};\n\nexport default Quiz;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { CSSTransitionGroup } from 'react-transition-group';\nimport { NavLink } from 'react-router-dom';\n\nfunction Result(props) {\n  return (\n    <CSSTransitionGroup\n      className=\"container result\"\n      component=\"div\"\n      transitionName=\"fade\"\n      transitionEnterTimeout={800}\n      transitionLeaveTimeout={500}\n      transitionAppear\n      transitionAppearTimeout={500}\n    >\n      <div>\n        {/* You prefer <strong>{props.quizResult}</strong>! */}\n        <div>Thank You For Completion Assesement. <NavLink to=\"/\" className=\"submit\">Finished Assesement</NavLink></div>\n      </div>\n     \n    </CSSTransitionGroup>\n  );\n}\n\nResult.propTypes = {\n  quizResult: PropTypes.string.isRequired\n};\n\nexport default Result;\n","import React, { Component } from 'react';\r\nimport quizQuestions from '../api/quizQuestions';\r\nimport Quiz from '../components/Quiz';\r\nimport Result from '../components/Result';\r\nimport '../App.css';\r\n\r\nclass QuestionTest extends Component {\r\n    constructor(props) {\r\n      super(props);\r\n  \r\n      this.state = {\r\n        counter: 0,\r\n        questionId: 1,\r\n        question: '',\r\n        answerOptions: [],\r\n        answer: '',\r\n        answersCount: {},\r\n        result: ''\r\n      };\r\n  \r\n      this.handleAnswerSelected = this.handleAnswerSelected.bind(this);\r\n    }\r\n  \r\n    componentDidMount() {\r\n      const shuffledAnswerOptions = quizQuestions.map(question =>\r\n        this.shuffleArray(question.answers)\r\n      );\r\n      this.setState({\r\n        question: quizQuestions[0].question,\r\n        answerOptions: shuffledAnswerOptions[0]\r\n      });\r\n    }\r\n  \r\n    shuffleArray(array) {\r\n      var currentIndex = array.length,\r\n        temporaryValue,\r\n        randomIndex;\r\n  \r\n      // While there remain elements to shuffle...\r\n      while (0 !== currentIndex) {\r\n        // Pick a remaining element...\r\n        randomIndex = Math.floor(Math.random() * currentIndex);\r\n        currentIndex -= 1;\r\n  \r\n        // And swap it with the current element.\r\n        temporaryValue = array[currentIndex];\r\n        array[currentIndex] = array[randomIndex];\r\n        array[randomIndex] = temporaryValue;\r\n      }\r\n  \r\n      return array;\r\n    }\r\n  \r\n    handleAnswerSelected(event) {\r\n      this.setUserAnswer(event.currentTarget.value);\r\n  \r\n      if (this.state.questionId < quizQuestions.length) {\r\n        setTimeout(() => this.setNextQuestion(), 300);\r\n      } else {\r\n        setTimeout(() => this.setResults(this.getResults()), 300);\r\n      }\r\n    }\r\n  \r\n    setUserAnswer(answer) {\r\n      this.setState((state, props) => ({\r\n        answersCount: {\r\n          ...state.answersCount,\r\n          [answer]: (state.answersCount[answer] || 0) + 1\r\n        },\r\n        answer: answer\r\n      }));\r\n    }\r\n  \r\n    setNextQuestion() {\r\n      const counter = this.state.counter + 1;\r\n      const questionId = this.state.questionId + 1;\r\n  \r\n      this.setState({\r\n        counter: counter,\r\n        questionId: questionId,\r\n        question: quizQuestions[counter].question,\r\n        answerOptions: quizQuestions[counter].answers,\r\n        answer: ''\r\n      });\r\n    }\r\n  \r\n    getResults() {\r\n      const answersCount = this.state.answersCount;\r\n      const answersCountKeys = Object.keys(answersCount);\r\n      const answersCountValues = answersCountKeys.map(key => answersCount[key]);\r\n      const maxAnswerCount = Math.max.apply(null, answersCountValues);\r\n  \r\n      return answersCountKeys.filter(key => answersCount[key] === maxAnswerCount);\r\n    }\r\n  \r\n    setResults(result) {\r\n      if (result.length === 1) {\r\n        this.setState({ result: result[0] });\r\n      } else {\r\n        this.setState({ result: 'Undetermined' });\r\n      }\r\n    }\r\n  \r\n    renderQuiz() {\r\n      return (\r\n        <Quiz\r\n          answer={this.state.answer}\r\n          answerOptions={this.state.answerOptions}\r\n          questionId={this.state.questionId}\r\n          question={this.state.question}\r\n          questionTotal={quizQuestions.length}\r\n          onAnswerSelected={this.handleAnswerSelected}\r\n        />\r\n      );\r\n    }\r\n  \r\n    renderResult() {\r\n      return <Result quizResult={this.state.result} />;\r\n    }\r\n  \r\n    render() {\r\n      return (\r\n          <>\r\n        <div className=\"App\">\r\n          <div className=\"App-header\">\r\n         \r\n            <h2>Multiple Choice Quistion & Answer</h2>\r\n          </div>\r\n          {this.state.result ? this.renderResult() : this.renderQuiz()}\r\n        </div>\r\n        </>\r\n      );\r\n    }\r\n  }\r\n  \r\n  export default QuestionTest;\r\n  \r\n","import React  from 'react'\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom'\nimport Login from './components/Login';\nimport StartQuiz from './components/StartQuiz';\nimport QuestionTest from './components/QuestionTest';\n\n\nconst App =()=>{\n\n\n  \n    return (\n      <div>\n        <Router>\n        \n      \n        \n                    <Switch> \n                          <Route path = \"/\" exact component = {Login}></Route>\n                          <Route path = \"/StartQuiz\" exact component = {StartQuiz}></Route>\n                          <Route path = \"/QuestionTest\" exact component = {QuestionTest}></Route>\n                                            </Switch>\n              \n       \n        </Router>\n      </div>\n    )\n  }\n\n\nexport default App;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n  );\n  \n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}